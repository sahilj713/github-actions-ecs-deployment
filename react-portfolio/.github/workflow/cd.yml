name: react-portfolio-cd

on:
  workflow_dispatch:
    inputs:
      Image_tag:
        description: 'Image_tag'
        required: true 
        type: string
  
env:
      CLUSTER_NAME: ecs_cluster
      TASKDEF_NAME: ecs_terraform_task_def
      SERVICE_NAME: ecs_terraform_service
      AWS_DEFAULT_REGION : us-east-1
      ECR_REPOSITORY : nginx

jobs:
  
    build:
  
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Image repo and tag
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
            
            ECR_REPO=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ inputs.Image_tag }}
  
            # Set the command output as an environment variable
            echo "image=$ECR_REPO" >> $GITHUB_ENV

      - name: Download task definition
        run: |
            aws ecs describe-task-definition --task-definition $TASKDEF_NAME > task-def.json
            jq .taskDefinition task-def.json > taskdefinition.json
            jq 'del(.taskDefinitionArn)' taskdefinition.json | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredAt)'| jq 'del(.registeredBy)' > container-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: container-definition.json
          container-name: nginx
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true        
            
